name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Check Go formatting
        run: |
          cd processor/metricsinferenceprocessor
          unformatted=$(go fmt ./...)
          if [ -n "$unformatted" ]; then
            echo "Error: The following files need formatting:"
            echo "$unformatted"
            echo ""
            echo "Please run 'go fmt ./...' locally and commit the changes."
            exit 1
          fi
          echo "✓ All Go files are properly formatted"
      
      - name: Run go vet
        run: |
          cd processor/metricsinferenceprocessor
          go vet ./...
          echo "✓ go vet passed"
      
      - name: Check go mod tidy
        run: |
          cd processor/metricsinferenceprocessor
          go mod tidy
          if ! git diff --quiet go.mod go.sum; then
            echo "Error: go.mod or go.sum is not tidy"
            echo "Please run 'go mod tidy' locally and commit the changes."
            git diff go.mod go.sum
            exit 1
          fi
          echo "✓ go.mod is tidy"
      
      - name: Install linting tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest
      
      - name: Check import ordering with goimports
        run: |
          cd processor/metricsinferenceprocessor
          unformatted=$(goimports -l .)
          if [ -n "$unformatted" ]; then
            echo "Error: The following files have incorrect import ordering:"
            echo "$unformatted"
            echo ""
            echo "Please run 'goimports -w .' locally and commit the changes."
            exit 1
          fi
          echo "✓ All imports are properly ordered"
      
      - name: Check stricter formatting with gofumpt
        run: |
          cd processor/metricsinferenceprocessor
          unformatted=$(gofumpt -l .)
          if [ -n "$unformatted" ]; then
            echo "Warning: The following files could benefit from stricter formatting:"
            echo "$unformatted"
            echo ""
            echo "Consider running 'gofumpt -w .' locally for more consistent formatting."
            # Don't fail for now, just warn
          else
            echo "✓ All files pass gofumpt strict formatting"
          fi
      
      - name: Check commit messages
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Run tests
        run: make test
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  build:
    name: Build Collector
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Install OCB
        run: make install-ocb
      
      - name: Build collector
        run: make build
      
      - name: Test collector binary
        run: ./opentelemetry-inference-collector/opentelemetry-inference-collector --help | head -20
      
      - name: Upload collector binary
        uses: actions/upload-artifact@v4
        with:
          name: opentelemetry-inference-collector
          path: opentelemetry-inference-collector/opentelemetry-inference-collector

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Install OCB
        run: make install-ocb
      
      - name: Build collector
        run: make build
      
      - name: Run integration tests
        run: |
          cd processor/metricsinferenceprocessor
          # Enable integration tests with MLServer
          make integration-test || echo "Integration tests failed - this is expected until MLServer setup is complete"

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ghcr.io/${{ github.repository }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
